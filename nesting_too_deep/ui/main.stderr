warning: nested structure is 4 levels deep (max: 3)
  --> $DIR/main.rs:5:53
   |
LL |   static LAZY_VALUE: LazyLock<i32> = LazyLock::new(|| {
   |  _____________________________________________________^
LL | |     if let Some(config) = Some(42) {
LL | |         if config > 0 {
LL | |             if let Ok(validated) = Ok::<i32, &str>(config) {
...  |
LL | | });
   | |_^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting
   = note: `#[warn(nesting_too_deep)]` on by default

warning: nested structure is 6 levels deep (max: 3)
  --> $DIR/main.rs:39:5
   |
LL | /     if let Ok(op_result) = operation {
LL | |         if op_result < 100 {
LL | |             if score % 2 == 0 {
LL | |                 println!("Level 3 - should lint");
...  |
LL | |     }
   | |_____^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting

warning: nested structure is 4 levels deep (max: 3)
  --> $DIR/main.rs:59:5
   |
LL | /     if let Some(count_val) = maybe_count {
LL | |         if count_val > 5 {
LL | |             if score % 3 == 0 {
LL | |                 if score != 99 {
...  |
LL | |     }
   | |_____^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting

warning: nested structure is 5 levels deep (max: 3)
  --> $DIR/main.rs:80:5
   |
LL | /     if let Some(x) = maybe_count {
LL | |         if let Ok(y) = operation {
LL | |             if x > 5 {
LL | |                 if y < 50 {
...  |
LL | |     }
   | |_____^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting

warning: nested structure is 6 levels deep (max: 3)
  --> $DIR/main.rs:93:5
   |
LL | /     loop {
LL | |         for i in 0..10 {
LL | |             while i > 0 {
LL | |                 loop {
...  |
LL | |         break;
LL | |     }
   | |_____^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting

warning: nested structure is 5 levels deep (max: 3)
  --> $DIR/main.rs:122:28
   |
LL |       let closure_5_levels = || {
   |  ____________________________^
LL | |         if score_5_levels != 0 {
LL | |             let inner_closure_5_levels = || {
LL | |                 if let Some(val) = maybe_count_5_levels {
...  |
LL | |     };
   | |_____^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting

warning: nested structure is 5 levels deep (max: 3)
  --> $DIR/main.rs:153:10
   |
LL |   fn two() {
   |  __________^
LL | |     // LINT: 5 levels
LL | |     let standalone_closure = || {
LL | |         if let Some(data) = Some(15) {
...  |
LL | |     outer_closure();
LL | | }
   | |_^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting

warning: nested structure is 4 levels deep (max: 3)
  --> $DIR/main.rs:169:25
   |
LL |       let outer_closure = || {
   |  _________________________^
LL | |         let inner_closure = || {
LL | |             if let Ok(status) = Ok::<bool, &str>(true) {
LL | |                 if status {
...  |
LL | |         inner_closure();
LL | |     };
   | |_____^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting

warning: nested structure is 5 levels deep (max: 3)
  --> $DIR/main.rs:206:5
   |
LL | /     if let Some(token) = Some(42) {
LL | |         if token != 0 {
LL | |             match token {
LL | |                 42 => {
...  |
LL | |     }
   | |_____^
   |
   = help: consider using early returns, guard clauses, or extracting functions to reduce nesting

warning: 9 warnings emitted

